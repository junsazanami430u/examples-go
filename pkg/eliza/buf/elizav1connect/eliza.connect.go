// Copyright 2022-2023 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: buf/eliza.proto

package elizav1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	buf "github.com/junsazanami430u/examples-go/pkg/eliza/buf"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ElizaServiceName is the fully-qualified name of the ElizaService service.
	ElizaServiceName = "connectrpc.eliza.v1.ElizaService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ElizaServiceSayProcedure is the fully-qualified name of the ElizaService's Say RPC.
	ElizaServiceSayProcedure = "/connectrpc.eliza.v1.ElizaService/Say"
	// ElizaServiceConverseProcedure is the fully-qualified name of the ElizaService's Converse RPC.
	ElizaServiceConverseProcedure = "/connectrpc.eliza.v1.ElizaService/Converse"
	// ElizaServiceIntroduceProcedure is the fully-qualified name of the ElizaService's Introduce RPC.
	ElizaServiceIntroduceProcedure = "/connectrpc.eliza.v1.ElizaService/Introduce"
	// ElizaServiceGoodByeProcedure is the fully-qualified name of the ElizaService's GoodBye RPC.
	ElizaServiceGoodByeProcedure = "/connectrpc.eliza.v1.ElizaService/GoodBye"
)

// ElizaServiceClient is a client for the connectrpc.eliza.v1.ElizaService service.
type ElizaServiceClient interface {
	// Say is a unary RPC. Eliza responds to the prompt with a single sentence.
	Say(context.Context, *connect.Request[buf.SayRequest]) (*connect.Response[buf.SayResponse], error)
	// Converse is a bidirectional RPC. The caller may exchange multiple
	// back-and-forth messages with Eliza over a long-lived connection. Eliza
	// responds to each ConverseRequest with a ConverseResponse.
	Converse(context.Context) *connect.BidiStreamForClient[buf.ConverseRequest, buf.ConverseResponse]
	// Introduce is a server streaming RPC. Given the caller's name, Eliza
	// returns a stream of sentences to introduce itself.
	Introduce(context.Context, *connect.Request[buf.IntroduceRequest]) (*connect.ServerStreamForClient[buf.IntroduceResponse], error)
	GoodBye(context.Context, *connect.Request[buf.GoodByeRequest]) (*connect.Response[buf.GoodByeResponse], error)
}

// NewElizaServiceClient constructs a client for the connectrpc.eliza.v1.ElizaService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewElizaServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ElizaServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	elizaServiceMethods := buf.File_buf_eliza_proto.Services().ByName("ElizaService").Methods()
	return &elizaServiceClient{
		say: connect.NewClient[buf.SayRequest, buf.SayResponse](
			httpClient,
			baseURL+ElizaServiceSayProcedure,
			connect.WithSchema(elizaServiceMethods.ByName("Say")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		converse: connect.NewClient[buf.ConverseRequest, buf.ConverseResponse](
			httpClient,
			baseURL+ElizaServiceConverseProcedure,
			connect.WithSchema(elizaServiceMethods.ByName("Converse")),
			connect.WithClientOptions(opts...),
		),
		introduce: connect.NewClient[buf.IntroduceRequest, buf.IntroduceResponse](
			httpClient,
			baseURL+ElizaServiceIntroduceProcedure,
			connect.WithSchema(elizaServiceMethods.ByName("Introduce")),
			connect.WithClientOptions(opts...),
		),
		goodBye: connect.NewClient[buf.GoodByeRequest, buf.GoodByeResponse](
			httpClient,
			baseURL+ElizaServiceGoodByeProcedure,
			connect.WithSchema(elizaServiceMethods.ByName("GoodBye")),
			connect.WithClientOptions(opts...),
		),
	}
}

// elizaServiceClient implements ElizaServiceClient.
type elizaServiceClient struct {
	say       *connect.Client[buf.SayRequest, buf.SayResponse]
	converse  *connect.Client[buf.ConverseRequest, buf.ConverseResponse]
	introduce *connect.Client[buf.IntroduceRequest, buf.IntroduceResponse]
	goodBye   *connect.Client[buf.GoodByeRequest, buf.GoodByeResponse]
}

// Say calls connectrpc.eliza.v1.ElizaService.Say.
func (c *elizaServiceClient) Say(ctx context.Context, req *connect.Request[buf.SayRequest]) (*connect.Response[buf.SayResponse], error) {
	return c.say.CallUnary(ctx, req)
}

// Converse calls connectrpc.eliza.v1.ElizaService.Converse.
func (c *elizaServiceClient) Converse(ctx context.Context) *connect.BidiStreamForClient[buf.ConverseRequest, buf.ConverseResponse] {
	return c.converse.CallBidiStream(ctx)
}

// Introduce calls connectrpc.eliza.v1.ElizaService.Introduce.
func (c *elizaServiceClient) Introduce(ctx context.Context, req *connect.Request[buf.IntroduceRequest]) (*connect.ServerStreamForClient[buf.IntroduceResponse], error) {
	return c.introduce.CallServerStream(ctx, req)
}

// GoodBye calls connectrpc.eliza.v1.ElizaService.GoodBye.
func (c *elizaServiceClient) GoodBye(ctx context.Context, req *connect.Request[buf.GoodByeRequest]) (*connect.Response[buf.GoodByeResponse], error) {
	return c.goodBye.CallUnary(ctx, req)
}

// ElizaServiceHandler is an implementation of the connectrpc.eliza.v1.ElizaService service.
type ElizaServiceHandler interface {
	// Say is a unary RPC. Eliza responds to the prompt with a single sentence.
	Say(context.Context, *connect.Request[buf.SayRequest]) (*connect.Response[buf.SayResponse], error)
	// Converse is a bidirectional RPC. The caller may exchange multiple
	// back-and-forth messages with Eliza over a long-lived connection. Eliza
	// responds to each ConverseRequest with a ConverseResponse.
	Converse(context.Context, *connect.BidiStream[buf.ConverseRequest, buf.ConverseResponse]) error
	// Introduce is a server streaming RPC. Given the caller's name, Eliza
	// returns a stream of sentences to introduce itself.
	Introduce(context.Context, *connect.Request[buf.IntroduceRequest], *connect.ServerStream[buf.IntroduceResponse]) error
	GoodBye(context.Context, *connect.Request[buf.GoodByeRequest]) (*connect.Response[buf.GoodByeResponse], error)
}

// NewElizaServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewElizaServiceHandler(svc ElizaServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	elizaServiceMethods := buf.File_buf_eliza_proto.Services().ByName("ElizaService").Methods()
	elizaServiceSayHandler := connect.NewUnaryHandler(
		ElizaServiceSayProcedure,
		svc.Say,
		connect.WithSchema(elizaServiceMethods.ByName("Say")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	elizaServiceConverseHandler := connect.NewBidiStreamHandler(
		ElizaServiceConverseProcedure,
		svc.Converse,
		connect.WithSchema(elizaServiceMethods.ByName("Converse")),
		connect.WithHandlerOptions(opts...),
	)
	elizaServiceIntroduceHandler := connect.NewServerStreamHandler(
		ElizaServiceIntroduceProcedure,
		svc.Introduce,
		connect.WithSchema(elizaServiceMethods.ByName("Introduce")),
		connect.WithHandlerOptions(opts...),
	)
	elizaServiceGoodByeHandler := connect.NewUnaryHandler(
		ElizaServiceGoodByeProcedure,
		svc.GoodBye,
		connect.WithSchema(elizaServiceMethods.ByName("GoodBye")),
		connect.WithHandlerOptions(opts...),
	)
	return "/connectrpc.eliza.v1.ElizaService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ElizaServiceSayProcedure:
			elizaServiceSayHandler.ServeHTTP(w, r)
		case ElizaServiceConverseProcedure:
			elizaServiceConverseHandler.ServeHTTP(w, r)
		case ElizaServiceIntroduceProcedure:
			elizaServiceIntroduceHandler.ServeHTTP(w, r)
		case ElizaServiceGoodByeProcedure:
			elizaServiceGoodByeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedElizaServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedElizaServiceHandler struct{}

func (UnimplementedElizaServiceHandler) Say(context.Context, *connect.Request[buf.SayRequest]) (*connect.Response[buf.SayResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("connectrpc.eliza.v1.ElizaService.Say is not implemented"))
}

func (UnimplementedElizaServiceHandler) Converse(context.Context, *connect.BidiStream[buf.ConverseRequest, buf.ConverseResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("connectrpc.eliza.v1.ElizaService.Converse is not implemented"))
}

func (UnimplementedElizaServiceHandler) Introduce(context.Context, *connect.Request[buf.IntroduceRequest], *connect.ServerStream[buf.IntroduceResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("connectrpc.eliza.v1.ElizaService.Introduce is not implemented"))
}

func (UnimplementedElizaServiceHandler) GoodBye(context.Context, *connect.Request[buf.GoodByeRequest]) (*connect.Response[buf.GoodByeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("connectrpc.eliza.v1.ElizaService.GoodBye is not implemented"))
}
